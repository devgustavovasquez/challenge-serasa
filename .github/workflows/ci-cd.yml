name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: 🧰 Setup & Install
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      BASE_COMMIT: ${{ steps.get_base_commit.outputs.base }}

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Get base commit
        id: get_base_commit
        run: echo "base=$(git rev-parse origin/main)" >> $GITHUB_OUTPUT

      - name: 🚀 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📤 Cache dependencies
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  lint:
    name: 🔍 Lint
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: 🚀 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: 📥 Restore dependencies cache
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📦 Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run Lint
        run: pnpm lint

  build:
    name: 🛠️ Build
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: 🚀 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: 📥 Restore dependencies cache
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📦 Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: 🛠️ Build affected packages
        run: pnpm run build

      - name: 📤 Cache build output
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}

  test:
    name: ✅ Test
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: 🚀 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: 📥 Restore dependencies cache
        uses: actions/cache@v3
        id: node-modules-cache
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: 📦 Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: ✅ Run tests on affected packages
        run: pnpm test

  build-and-push:
    name: 🛠️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, build, test]
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_USERNAME }}/challenge-serasa
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,format=long
            type=ref,event=tag
            type=ref,event=pr

      - name: 🧱 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          registry: ${{ secrets.REGISTRY_URL }}

      - name: 📥 Restore build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: 🧠 Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 📦 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: 🔄 Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: 📡 SSH Deploy to Server
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: ⬇️ Checkout docker-compose only
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker-compose.yml

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: 📤 Copy docker-compose.yml to server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_PROJECT_PATH }}/docker-compose.yml

      - name: 🚀 Pull & Restart with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd ${{ secrets.SERVER_PROJECT_PATH }}

          docker compose down || true
          docker compose pull
          docker compose up -d
          docker compose ps
          docker image prune -af
          EOF
